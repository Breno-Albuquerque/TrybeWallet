{"version":3,"sources":["actions/index.js","pages/Login.js","components/Header.js","components/Form.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","redux/store.js","index.js"],"names":["addExpense","expenseData","coinsData","type","payload","exchangeRates","Login","state","email","password","isDisabled","handleChange","target","value","name","setState","handleDisable","handleClick","props","history","saveEmail","push","validPassword","validEmail","length","endsWith","includes","this","className","htmlFor","autoComplete","placeholder","onChange","id","data-testid","disabled","onClick","React","Component","connect","dispatch","sendEmail","Header","handleSum","expenses","reduce","acc","curr","currencyAsk","currency","ask","Number","toFixed","userEmail","user","wallet","Form","description","method","tag","saveExpense","edit","isEditing","editingIndex","currencies","map","coinCode","key","expensesArr","a","fetch","response","json","fetchRate","index","editExpense","Table","handleEditButton","enterEditMode","handleDeleteButton","expenseIndex","removeExpense","getCoinName","expense","getExchangeValue","getConvertedValue","deleteExpense","turnEditModeOn","Wallet","saveCurrenciesList","USDT","values","Object","coinsList","item","code","currenciesArr","saveCurrencies","App","exact","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","filter","_item","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb80230b.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const sendEmail = (email) => ({ type: 'EMAIL', email });\n\nexport const saveCurrencies = (currenciesArr) => ({\n  type: 'ADD_CURRENCIES', currencies: currenciesArr });\n\nexport const addExpense = (expenseData, coinsData) => (\n  { type: 'ADD_EXPENSE',\n    payload: { ...expenseData, exchangeRates: { ...coinsData } } });\n\nexport const turnEditModeOn = (index) => ({ type: 'EDIT_MODE', editingIndex: index });\n\nexport const editExpense = (expenseData, index) => ({\n  type: 'EDIT_EXPENSE',\n  payload: { expenseData, index },\n});\n\nexport const deleteExpense = (expenseIndex) => ({ type: 'DELETE_EXPENSE', expenseIndex });\n\nexport const fetchRate = (expenseData) => async (dispatch) => {\n  const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n  const coinsData = await response.json();\n\n  dispatch(addExpense(expenseData, coinsData));\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { sendEmail } from '../actions';\nimport './Login.css';\n\nclass Login extends React.Component {\n  state = {\n    email: '',\n    password: '',\n    isDisabled: true,\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    }, () => this.handleDisable());\n  }\n\n  handleClick = () => {\n    const { history, saveEmail } = this.props;\n    const { email } = this.state;\n\n    saveEmail(email);\n    history.push('/carteira');\n  }\n\n  handleDisable = () => {\n    const { email, password } = this.state;\n\n    if (this.validPassword(password) && this.validEmail(email)) {\n      this.setState({\n        isDisabled: false,\n      });\n    } else {\n      this.setState({\n        isDisabled: true,\n      });\n    }\n  }\n\n  validPassword = (password) => {\n    const MIN_LENGTH = 6;\n\n    if (password.length >= MIN_LENGTH) {\n      return true;\n    }\n\n    return false;\n  }\n\n  validEmail = (email) => {\n    if (email.endsWith('.com') && email.includes('@')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const { isDisabled } = this.state;\n\n    return (\n      <main className=\"login-main\">\n        <div className=\"content-container\">\n          <h1 className=\"login-title\">WALLET</h1>\n          <form className=\"login-form\">\n            <label htmlFor=\"email-input\" className=\"login-label\">\n              <input\n                autoComplete=\"off\"\n                className=\"login-input\"\n                placeholder='Email: \"alguem@email.com\"'\n                name=\"email\"\n                onChange={ this.handleChange }\n                id=\"email-input\"\n                data-testid=\"email-input\"\n                type=\"email\"\n              />\n            </label>\n            <label htmlFor=\"password-input\" className=\"login-label\">\n              <input\n                autoComplete=\"off\"\n                className=\"login-input\"\n                placeholder=\"Senha: 6 dígitos\"\n                name=\"password\"\n                onChange={ this.handleChange }\n                id=\"password-input\"\n                data-testid=\"password-input\"\n                type=\"password\"\n              />\n            </label>\n            <button\n              className={ isDisabled ? 'login-button-disabled' : 'login-button-enabled' }\n              disabled={ isDisabled }\n              onClick={ this.handleClick }\n              type=\"button\"\n            >\n              Entrar\n            </button>\n          </form>\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveEmail: (email) => dispatch(sendEmail(email)),\n});\n\nLogin.propTypes = {\n  saveEmail: PropTypes.func.isRequired,\n  history: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Header.css';\n\nclass Header extends React.Component {\n  handleSum = () => {\n    const zero = 0;\n    const { expenses } = this.props;\n\n    if (expenses.length > 0) {\n      const totalSum = expenses.reduce((acc, curr) => {\n        const { value } = curr;\n        const currencyAsk = curr.exchangeRates[curr.currency].ask;\n        const brlValue = Number(currencyAsk) * Number(value);\n        return acc + brlValue;\n      }, 0);\n\n      return totalSum.toFixed(2);\n    }\n    return zero.toFixed(2);\n  }\n\n  render() {\n    const { userEmail } = this.props;\n\n    return (\n      <header>\n\n        <div className=\"title-container\">\n          <h1>TRYBE WALLET</h1>\n        </div>\n\n        <div className=\"infos-div\" data-testid=\"email-field\">\n          <span>Email:</span>\n          {' '}\n          { userEmail }\n        </div>\n        <div className=\"infos-div\" data-testid=\"total-field\">\n          <span>Despesa Total:</span>\n          {' '}\n          {'R$ '}\n          { this.handleSum() }\n        </div>\n        <div\n          className=\"infos-div\"\n          data-testid=\"header-currency-field\"\n        >\n          <span>BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  userEmail: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  userEmail: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchRate, editExpense } from '../actions';\nimport './Form.css';\n\nclass Form extends React.Component {\n  state = {\n    value: '',\n    description: '',\n    currency: 'USD',\n    method: 'Dinheiro',\n    tag: 'Alimentação',\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick = () => {\n    const { saveExpense, edit, isEditing, editingIndex } = this.props;\n\n    if (isEditing) {\n      edit(this.state, editingIndex);\n    } else {\n      saveExpense(this.state);\n\n      this.setState({\n        value: '',\n      });\n    }\n  }\n\n  render() {\n    const { value } = this.state;\n    const { currencies, isEditing } = this.props;\n\n    return (\n      <div className={ isEditing ? 'div-form-container-editing' : 'div-form-container' }>\n        <form className=\"main-form\">\n          <label className=\"input-label\" htmlFor=\"value-input\">\n            {' '}\n            Valor:\n            {' '}\n            {' '}\n            <input\n              value={ value }\n              name=\"value\"\n              onChange={ this.handleChange }\n              id=\"value-input\"\n              data-testid=\"value-input\"\n              autoComplete=\"off\"\n            />\n          </label>\n\n          <label className=\"input-label\" htmlFor=\"description-input\">\n            {' '}\n            Descrição:\n            {' '}\n            {' '}\n            <input\n              name=\"description\"\n              onChange={ this.handleChange }\n              id=\"description-input\"\n              data-testid=\"description-input\"\n              autoComplete=\"off\"\n            />\n          </label>\n\n          <label className=\"select-label\" htmlFor=\"currency-input\">\n            {' '}\n            Moeda\n            {' '}\n            {' '}\n            <select\n              name=\"currency\"\n              onChange={ this.handleChange }\n              id=\"currency-input\"\n              data-testid=\"currency-input\"\n            >\n              { currencies.map((coinCode) => (\n                <option\n                  data-testid={ coinCode }\n                  key={ coinCode }\n                >\n                  { coinCode }\n\n                </option>\n              ))}\n            </select>\n          </label>\n\n          <label className=\"select-label\" htmlFor=\"method-input\">\n            {' '}\n            Método de pagamento:\n            {' '}\n            {' '}\n            <select\n              name=\"method\"\n              onChange={ this.handleChange }\n              id=\"method-input\"\n              data-testid=\"method-input\"\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n\n          <label htmlFor=\"tag-input\" className=\"select-label\">\n            {' '}\n            Categoria:\n            {' '}\n            {' '}\n            <select\n              name=\"tag\"\n              onChange={ this.handleChange }\n              data-testid=\"tag-input\"\n              id=\"tag-input\"\n            >\n              <option>Lazer</option>\n              <option>Transporte</option>\n              <option>Trabalho</option>\n              <option>Alimentação</option>\n              <option>Saúde</option>\n            </select>\n          </label>\n\n          <button\n            className={ isEditing ? 'form-edit-button' : 'form-add-button' }\n            onClick={ this.handleClick }\n            type=\"button\"\n          >\n            { isEditing ? 'Editar despesa' : 'Adicionar despesa'}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  saveExpense: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  edit: PropTypes.func.isRequired,\n  editingIndex: PropTypes.number.isRequired,\n  isEditing: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expensesArr: state.wallet.expenses,\n  isEditing: state.wallet.isEditing,\n  editingIndex: state.wallet.editingIndex,\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveExpense: (expenseData) => dispatch(fetchRate(expenseData)),\n  edit: (expenseData, index) => dispatch(editExpense(expenseData, index)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from 'react';\nimport './Table.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpense, turnEditModeOn } from '../actions/index';\n\nclass Table extends React.Component {\n  handleEditButton = (index) => {\n    const { enterEditMode } = this.props;\n\n    enterEditMode(index);\n  }\n\n  handleDeleteButton = (expenseIndex) => {\n    const { removeExpense } = this.props;\n\n    removeExpense(expenseIndex);\n  }\n\n  getCoinName = (expense) => {\n    const { exchangeRates, currency } = expense;\n    const coinName = exchangeRates[currency].name;\n\n    return coinName;\n  }\n\n  getExchangeValue = (expense) => {\n    const { exchangeRates, currency } = expense;\n    const { ask } = exchangeRates[currency];\n\n    return Number(ask).toFixed(2);\n  }\n\n  getConvertedValue = (expense) => {\n    const { exchangeRates, currency, value } = expense;\n    const { ask } = exchangeRates[currency];\n\n    return (Number(ask) * Number(value)).toFixed(2);\n  }\n\n  render() {\n    const { expenses } = this.props;\n\n    return (\n      <div className=\"table-container\">\n        <table>\n          <tr className=\"tr-of-th\">\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th className=\"coin-td\">Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n          { expenses.map((expense, index) => (\n            <tr key={ expense.id }>\n              <td>{ expense.description }</td>\n              <td>{ expense.tag }</td>\n              <td>{ expense.method }</td>\n              <td>{ Number(expense.value).toFixed(2) }</td>\n              <td className=\"coin-td\">{ this.getCoinName(expense) }</td>\n              <td>{ this.getExchangeValue(expense) }</td>\n              <td>{ this.getConvertedValue(expense) }</td>\n              <td>Real</td>\n              <td>\n                <button\n                  className=\"table-edit-button\"\n                  type=\"button\"\n                  data-testid=\"edit-btn\"\n                  onClick={ () => this.handleEditButton(index) }\n                >\n                  !\n                </button>\n                <button\n                  className=\"table-delete-button\"\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ () => this.handleDeleteButton(index) }\n                >\n                  X\n                </button>\n              </td>\n            </tr>\n          )) }\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.string).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n  enterEditMode: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n  isEditing: state.wallet.isEditing,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (expenseIndex) => dispatch(deleteExpense(expenseIndex)),\n  enterEditMode: (index) => dispatch(turnEditModeOn(index)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Form from '../components/Form';\nimport Table from '../components/Table';\nimport { saveCurrencies } from '../actions';\nimport './Wallet.css';\n\nclass Wallet extends React.Component {\n  async componentDidMount() {\n    const { saveCurrenciesList } = this.props;\n\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const coinsData = await response.json();\n    delete coinsData.USDT;\n    const values = Object.values(coinsData);\n    const coinsList = values.map((item) => item.code);\n\n    saveCurrenciesList(coinsList);\n  }\n\n  render() {\n    return (\n      <main className=\"wallet-container\">\n        <Header />\n        <div className=\"tableAndForm-components-container\">\n          <Form />\n          <Table />\n        </div>\n\n      </main>\n    );\n  }\n}\n\nWallet.propTypes = {\n  saveCurrenciesList: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveCurrenciesList: (currenciesArr) => dispatch(saveCurrencies(currenciesArr)),\n});\n\nexport default connect(null, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'EMAIL':\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isEditing: false,\n  editingIndex: '',\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'ADD_CURRENCIES':\n    return {\n      ...state,\n      currencies: action.currencies,\n    };\n  case 'ADD_EXPENSE':\n    return {\n      ...state,\n      expenses: [...state.expenses, { id: state.expenses.length, ...action.payload }],\n    };\n  case 'EDIT_MODE':\n    return {\n      ...state,\n      isEditing: true,\n      editingIndex: action.editingIndex,\n    };\n  case 'EDIT_EXPENSE':\n    return {\n      ...state,\n      isEditing: false,\n      expenses: state.expenses\n        .map((expense, index) => {\n          if (index === action.payload.index) {\n            return {\n              id: expense.id,\n              ...action.payload.expenseData,\n              exchangeRates: expense.exchangeRates,\n            };\n          }\n          return expense;\n        }),\n    };\n\n  case ('DELETE_EXPENSE'):\n    return {\n      ...state,\n      expenses: (state.expenses).filter((_item, index) => index !== action.expenseIndex),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}